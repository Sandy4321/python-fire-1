#!/usr/bin/env python
# vim: set tabstop=4 shiftwidth=4 textwidth=79 cc=72,79:
"""
    python_fire: Executable script for python-fire.

    Can be ran in training mode, or testing mode. Must use a dataset
    compatible with the NSL-KDD datasets, in ARFF format.

    In training mode, this script finds membership functions for all of
    the attributes. As the training examples are labelled, it also
    generates fuzzy rules for classifying examples as anomalous or
    normal.

    In testing mode, this script takes the generated membership functions
    and rule sets and applies them to the given data. It outputs in CSV
    format.

    In live mode, this script takes data directly from a tcpdump stream
    -- this can be a text file, or a live stream via stdin (Use '-' to
    specify standard input). It prints alerts to the console when it
    detects suspicious activity above a user-defined threshold.

    Original Author: Owain Jones [github.com/erinaceous] [contact@odj.me]
"""

from __future__ import print_function
import fire.fuzzy
import fire.data
import argparse


def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('mode',
                        help='Can be "training", "testing" or "live"')
    parser.add_argument('-f', default='gaussian',
                        help='Membership function to use. Default: gaussian')
    parser.add_argument('input',
                        help='In training mode: path to input ARFF file. In ' +
                             'testing mode: path to JSON parameters file. ' +
                             'In live mode: stdin or path to raw tcpdump file')
    return parser.parse_args()


def training(args):
    data = fire.data.ARFFReader(args.input)
    print('Loading data from', args.input)
    data.load()
    clusters = fire.fuzzy.cmeans(data.data, data.attributes, mf=args.f)
    print(clusters)


def testing(args):
    pass


def live(args):
    pass


modes = {
    "training": training,
    "testing": testing,
    "live": live
}


if __name__ == '__main__':
    args = parse_args()
    if args.mode not in modes.keys():
        raise Exception('Program mode not "training", "testing" or "live"')
    modes[args.mode](args)
